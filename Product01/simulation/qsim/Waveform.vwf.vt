// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/31/2023 20:07:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mainmodule
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mainmodule_vlg_vec_tst();
// constants                                           
// general purpose registers
reg BT0;
reg BT1;
reg BT2;
reg BT3;
reg CH0;
reg CH1;
reg CH2;
reg CH3;
reg CH4;
reg CH5;
reg CH6;
reg CH7;
// wires                                               
wire COL0;
wire COL1;
wire COL2;
wire COL3;
wire COL4;
wire COL5;
wire LED0;
wire LED1;
wire LED2;
wire LED3;
wire LED4;
wire LED5;
wire LED6;
wire LIN0;
wire LIN1;
wire LIN2;
wire LIN3;
wire LIN4;
wire LIN5;
wire LIN6;
wire SGD0;
wire SGD1;
wire SGD2;
wire SGD3;
wire SGD4;
wire SGD5;
wire SGD6;
wire tmp0;
wire tmp1;
wire tmp2;
wire tmp3;
wire tmp4;

// assign statements (if any)                          
mainmodule i1 (
// port map - connection between master ports and signals/registers   
	.BT0(BT0),
	.BT1(BT1),
	.BT2(BT2),
	.BT3(BT3),
	.CH0(CH0),
	.CH1(CH1),
	.CH2(CH2),
	.CH3(CH3),
	.CH4(CH4),
	.CH5(CH5),
	.CH6(CH6),
	.CH7(CH7),
	.COL0(COL0),
	.COL1(COL1),
	.COL2(COL2),
	.COL3(COL3),
	.COL4(COL4),
	.COL5(COL5),
	.LED0(LED0),
	.LED1(LED1),
	.LED2(LED2),
	.LED3(LED3),
	.LED4(LED4),
	.LED5(LED5),
	.LED6(LED6),
	.LIN0(LIN0),
	.LIN1(LIN1),
	.LIN2(LIN2),
	.LIN3(LIN3),
	.LIN4(LIN4),
	.LIN5(LIN5),
	.LIN6(LIN6),
	.SGD0(SGD0),
	.SGD1(SGD1),
	.SGD2(SGD2),
	.SGD3(SGD3),
	.SGD4(SGD4),
	.SGD5(SGD5),
	.SGD6(SGD6),
	.tmp0(tmp0),
	.tmp1(tmp1),
	.tmp2(tmp2),
	.tmp3(tmp3),
	.tmp4(tmp4)
);
initial 
begin 
#32000000 $finish;
end 

// CH7
always
begin
	CH7 = 1'b0;
	CH7 = #16000000 1'b1;
	#16000000;
end 

// BT3
always
begin
	BT3 = 1'b0;
	BT3 = #8000000 1'b1;
	#8000000;
end 

// BT2
always
begin
	BT2 = 1'b0;
	BT2 = #4000000 1'b1;
	#4000000;
end 

// CH6
always
begin
	CH6 = 1'b0;
	CH6 = #2000000 1'b1;
	#2000000;
end 

// CH5
always
begin
	CH5 = 1'b0;
	CH5 = #1000000 1'b1;
	#1000000;
end 

// CH4
always
begin
	CH4 = 1'b0;
	CH4 = #500000 1'b1;
	#500000;
end 

// CH3
always
begin
	CH3 = 1'b0;
	CH3 = #16000000 1'b1;
	#16000000;
end 

// BT1
always
begin
	BT1 = 1'b0;
	BT1 = #8000000 1'b1;
	#8000000;
end 

// BT0
always
begin
	BT0 = 1'b0;
	BT0 = #4000000 1'b1;
	#4000000;
end 

// CH2
always
begin
	CH2 = 1'b0;
	CH2 = #2000000 1'b1;
	#2000000;
end 

// CH1
always
begin
	CH1 = 1'b0;
	CH1 = #1000000 1'b1;
	#1000000;
end 

// CH0
always
begin
	CH0 = 1'b0;
	CH0 = #500000 1'b1;
	#500000;
end 
endmodule

